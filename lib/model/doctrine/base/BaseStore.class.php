<?php

/**
 * BaseStore
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $id
 * @property integer $item_id
 * @property integer $price
 * @property integer $featured_until
 * @property array $sale
 * @property boolean $purchasable
 * @property boolean $usable
 * @property integer $priority_id
 * @property Item $item
 * 
 * @method integer getId()             Returns the current record's "id" value
 * @method integer getItemId()         Returns the current record's "item_id" value
 * @method integer getPrice()          Returns the current record's "price" value
 * @method integer getFeaturedUntil()  Returns the current record's "featured_until" value
 * @method array   getSale()           Returns the current record's "sale" value
 * @method boolean getPurchasable()    Returns the current record's "purchasable" value
 * @method boolean getUsable()         Returns the current record's "usable" value
 * @method integer getPriorityId()     Returns the current record's "priority_id" value
 * @method Item    getItem()           Returns the current record's "item" value
 * @method Store   setId()             Sets the current record's "id" value
 * @method Store   setItemId()         Sets the current record's "item_id" value
 * @method Store   setPrice()          Sets the current record's "price" value
 * @method Store   setFeaturedUntil()  Sets the current record's "featured_until" value
 * @method Store   setSale()           Sets the current record's "sale" value
 * @method Store   setPurchasable()    Sets the current record's "purchasable" value
 * @method Store   setUsable()         Sets the current record's "usable" value
 * @method Store   setPriorityId()     Sets the current record's "priority_id" value
 * @method Store   setItem()           Sets the current record's "item" value
 * 
 * @package    edgeworld
 * @subpackage model
 * @author     BRIGADA
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseStore extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('store');
        $this->hasColumn('id', 'integer', null, array(
             'type' => 'integer',
             'primary' => true,
             ));
        $this->hasColumn('item_id', 'integer', null, array(
             'type' => 'integer',
             'notnull' => true,
             ));
        $this->hasColumn('price', 'integer', null, array(
             'type' => 'integer',
             ));
        $this->hasColumn('featured_until', 'integer', null, array(
             'type' => 'integer',
             ));
        $this->hasColumn('sale', 'array', null, array(
             'type' => 'array',
             ));
        $this->hasColumn('purchasable', 'boolean', null, array(
             'type' => 'boolean',
             'notnull' => true,
             ));
        $this->hasColumn('usable', 'boolean', null, array(
             'type' => 'boolean',
             'notnull' => true,
             ));
        $this->hasColumn('priority_id', 'integer', null, array(
             'type' => 'integer',
             ));
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasOne('Item as item', array(
             'local' => 'item_id',
             'foreign' => 'id',
             'onDelete' => 'CASCADE',
             'onUpdate' => 'CASCADE'));
    }
}