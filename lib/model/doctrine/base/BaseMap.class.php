<?php

/**
 * BaseMap
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $id
 * @property integer $sector
 * @property integer $width
 * @property integer $height
 * @property integer $chunk_size
 * @property array $outpost_levels
 * @property object $upgrade_costs
 * @property integer $max_territory_limit
 * @property text $type
 * @property boolean $active
 * @property integer $maximum_node_level
 * @property Doctrine_Collection $nodes
 * 
 * @method integer             getId()                  Returns the current record's "id" value
 * @method integer             getSector()              Returns the current record's "sector" value
 * @method integer             getWidth()               Returns the current record's "width" value
 * @method integer             getHeight()              Returns the current record's "height" value
 * @method integer             getChunkSize()           Returns the current record's "chunk_size" value
 * @method array               getOutpostLevels()       Returns the current record's "outpost_levels" value
 * @method object              getUpgradeCosts()        Returns the current record's "upgrade_costs" value
 * @method integer             getMaxTerritoryLimit()   Returns the current record's "max_territory_limit" value
 * @method text                getType()                Returns the current record's "type" value
 * @method boolean             getActive()              Returns the current record's "active" value
 * @method integer             getMaximumNodeLevel()    Returns the current record's "maximum_node_level" value
 * @method Doctrine_Collection getNodes()               Returns the current record's "nodes" collection
 * @method Map                 setId()                  Sets the current record's "id" value
 * @method Map                 setSector()              Sets the current record's "sector" value
 * @method Map                 setWidth()               Sets the current record's "width" value
 * @method Map                 setHeight()              Sets the current record's "height" value
 * @method Map                 setChunkSize()           Sets the current record's "chunk_size" value
 * @method Map                 setOutpostLevels()       Sets the current record's "outpost_levels" value
 * @method Map                 setUpgradeCosts()        Sets the current record's "upgrade_costs" value
 * @method Map                 setMaxTerritoryLimit()   Sets the current record's "max_territory_limit" value
 * @method Map                 setType()                Sets the current record's "type" value
 * @method Map                 setActive()              Sets the current record's "active" value
 * @method Map                 setMaximumNodeLevel()    Sets the current record's "maximum_node_level" value
 * @method Map                 setNodes()               Sets the current record's "nodes" collection
 * 
 * @package    edgeworld
 * @subpackage model
 * @author     BRIGADA
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseMap extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('map');
        $this->hasColumn('id', 'integer', null, array(
             'type' => 'integer',
             'primary' => true,
             ));
        $this->hasColumn('sector', 'integer', null, array(
             'type' => 'integer',
             ));
        $this->hasColumn('width', 'integer', null, array(
             'type' => 'integer',
             ));
        $this->hasColumn('height', 'integer', null, array(
             'type' => 'integer',
             ));
        $this->hasColumn('chunk_size', 'integer', null, array(
             'type' => 'integer',
             ));
        $this->hasColumn('outpost_levels', 'array', null, array(
             'type' => 'array',
             ));
        $this->hasColumn('upgrade_costs', 'object', null, array(
             'type' => 'object',
             ));
        $this->hasColumn('max_territory_limit', 'integer', null, array(
             'type' => 'integer',
             ));
        $this->hasColumn('type', 'text', null, array(
             'type' => 'text',
             ));
        $this->hasColumn('active', 'boolean', null, array(
             'type' => 'boolean',
             ));
        $this->hasColumn('maximum_node_level', 'integer', null, array(
             'type' => 'integer',
             ));
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasMany('MapNode as nodes', array(
             'local' => 'id',
             'foreign' => 'map_id'));

        $timestampable0 = new Doctrine_Template_Timestampable();
        $this->actAs($timestampable0);
    }
}